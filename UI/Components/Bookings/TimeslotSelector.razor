@using System.Linq
@namespace UI.Components.Bookings

<MudStack Spacing="3" Class="timeslot-selector">
    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="timeslot-header">
        <MudStack Class="timeslot-header__content">
            <MudText Typo="Typo.h5" Class="timeslot-title">
                @if (Clinic is null)
                {
                    <text>Select a clinic</text>
                }
                else
                {
                    <text>Available slots for @Clinic.Name</text>
                }
            </MudText>
            <MudText Typo="Typo.body2" Class="timeslot-subtitle">
                Pick a date range to explore upcoming availability tailored to your selection.
            </MudText>
        </MudStack>
        <MudDateRangePicker @bind-DateRange="DateRangeSelection"
                            Disabled="@DisableDatePicker"
                            MaxDate="@MaxDate"
                            MinDate="@MinDate"
                            Class="timeslot-date-picker"
                            Variant="Variant.Outlined"
                            Color="Color.Secondary" />
    </MudStack>

    <MudDivider />

    @if (Clinic is null)
    {
        <MudAlert Severity="Severity.Info" Elevation="0">Choose a clinic to view availability.</MudAlert>
    }
    else if (FilteredAvailability.Count == 0)
    {
        <MudAlert Severity="Severity.Warning" Elevation="0">There are no available slots within the selected range.</MudAlert>
    }
    else
    {
        <MudGrid Spacing="2">
            @foreach (var day in FilteredAvailability)
            {
                <MudItem xs="12" md="6">
                    <MudPaper Elevation="@(IsDaySelected(day.Date) ? 6 : 2)"
                              Class="@GetDayClass(day.Date)">
                        <MudStack Class="timeslot-day__stack">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Class="timeslot-day__header">
                                <MudAvatar Size="Size.Small"
                                           Color="Color.Secondary"
                                           Variant="Variant.Filled"
                                           Class="timeslot-day__avatar">
                                    <MudIcon Icon="@Icons.Material.Filled.CalendarToday" />
                                </MudAvatar>
                                <MudStack>
                                    <MudText Typo="Typo.subtitle1" Class="timeslot-day__title">@FormatDate(day.Date)</MudText>
                                    <MudText Typo="Typo.body2" Class="timeslot-day__meta">@GetAvailabilitySummary(day)</MudText>
                                </MudStack>
                            </MudStack>
                            <MudChipSet T="TimeSlotOption" Class="timeslot-chipset">
                                @foreach (var slot in day.Slots)
                                {
                                    <MudChip T="TimeSlotOption"
                                             Value="slot"
                                             Class="@GetChipClass(slot)"
                                             Color="@GetChipColor(slot)"
                                             Variant="@GetChipVariant(day.Date, slot)"
                                             Disabled="@slot.IsReserved"
                                             Ripple="@(!slot.IsReserved)"
                                             Selected="@IsSelected(day.Date, slot)"
                                            OnClick="async () => await HandleSelection(day.Date, slot)">
                                        @slot.DisplayLabel
                                    </MudChip>
                                }
                            </MudChipSet>
                        </MudStack>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    }
</MudStack>

@code {
    [Parameter]
    public ClinicSummary? Clinic { get; set; }

    [Parameter]
    public IReadOnlyList<DailyAvailability> Availability { get; set; } = Array.Empty<DailyAvailability>();

    [Parameter]
    public DateRange SelectedRange { get; set; } = new();

    [Parameter]
    public EventCallback<DateRange> SelectedRangeChanged { get; set; }

    [Parameter]
    public ScheduledSlot? SelectedSlot { get; set; }

    [Parameter]
    public EventCallback<ScheduledSlot?> SelectedSlotChanged { get; set; }

    private DateRange DateRangeSelection
    {
        get => SelectedRange;
        set
        {
            if (value is null)
            {
                if (SelectedRange.Start is null && SelectedRange.End is null)
                {
                    return;
                }

                _ = SelectedRangeChanged.InvokeAsync(new DateRange());
                return;
            }

            if (SelectedRange.Start == value.Start && SelectedRange.End == value.End)
            {
                return;
            }

            _ = SelectedRangeChanged.InvokeAsync(value);
        }
    }

    private IReadOnlyList<DailyAvailability> FilteredAvailability => Availability
        .Where(day => IsWithinRange(day.Date))
        .OrderBy(day => day.Date)
        .ToList();

    private bool DisableDatePicker => Clinic is null || Availability.Count == 0;

    private DateTime? MinDate => Availability.Count == 0
        ? null
        : Availability.Min(a => a.Date).ToDateTime(TimeOnly.MinValue);

    private DateTime? MaxDate => Availability.Count == 0
        ? null
        : Availability.Max(a => a.Date).ToDateTime(TimeOnly.MinValue);

    private static string FormatDate(DateOnly date) => date.ToDateTime(TimeOnly.MinValue).ToString("dddd, MMM d");

    private string GetAvailabilitySummary(DailyAvailability day)
    {
        var available = day.Slots.Count(slot => !slot.IsReserved);
        var total = day.Slots.Count;

        return available switch
        {
            0 => "All slots reserved",
            _ when available == total => $"{total} open slots",
            _ => $"{available} of {total} slots available"
        };
    }

    private bool IsSelected(DateOnly date, TimeSlotOption slot) => SelectedSlot is not null
        && SelectedSlot.Date == date
        && SelectedSlot.Slot.Id == slot.Id;

    private bool IsDaySelected(DateOnly date) => SelectedSlot?.Date == date;

    private string GetDayClass(DateOnly date) => IsDaySelected(date)
        ? "timeslot-day timeslot-day--selected"
        : "timeslot-day";

    private bool IsWithinRange(DateOnly date)
    {
        if (SelectedRange.Start is null || SelectedRange.End is null)
        {
            return true;
        }

        var start = DateOnly.FromDateTime(SelectedRange.Start.Value);
        var end = DateOnly.FromDateTime(SelectedRange.End.Value);

        return date >= start && date <= end;
    }

    private Task HandleSelection(DateOnly date, TimeSlotOption slot)
    {
        if (slot.IsReserved)
        {
            return Task.CompletedTask;
        }

        if (SelectedSlot is not null
            && SelectedSlot.Date == date
            && SelectedSlot.Slot.Id == slot.Id)
        {
            return SelectedSlotChanged.InvokeAsync(null);
        }

        return SelectedSlotChanged.InvokeAsync(new ScheduledSlot(date, slot));
    }

    private static string GetChipClass(TimeSlotOption slot) => slot.IsReserved
        ? "timeslot-chip timeslot-chip--reserved"
        : "timeslot-chip";

    private static Color GetChipColor(TimeSlotOption slot) => slot.IsReserved
        ? Color.Error
        : Color.Secondary;

    private Variant GetChipVariant(DateOnly date, TimeSlotOption slot) => slot.IsReserved
        ? Variant.Outlined
        : IsSelected(date, slot)
            ? Variant.Filled
            : Variant.Outlined;
}
