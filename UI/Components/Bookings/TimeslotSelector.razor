@using System.Linq
@namespace UI.Components.Bookings

<MudStack Spacing="2">
    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
        <MudText Typo="Typo.h5">
            @if (Clinic is null)
            {
                <text>Select a clinic</text>
            }
            else
            {
                <text>Available Slots for @Clinic.Name</text>
            }
        </MudText>
        <MudDateRangePicker @bind-DateRange="DateRangeSelection"
                            Disabled="@DisableDatePicker"
                            MaxDate="@MaxDate"
                            MinDate="@MinDate"
                            Class="timeslot-date-picker"
                            Variant="Variant.Outlined" />
    </MudStack>

    <MudText Typo="Typo.body2" Class="mud-text-secondary">Pick a date range to explore available times for the selected clinic.</MudText>
    <MudDivider />

    @if (Clinic is null)
    {
        <MudAlert Severity="Severity.Info" Elevation="0">Choose a clinic to view availability.</MudAlert>
    }
    else if (FilteredAvailability.Count == 0)
    {
        <MudAlert Severity="Severity.Warning" Elevation="0">There are no available slots within the selected range.</MudAlert>
    }
    else
    {
        <MudStack Spacing="2">
            @foreach (var day in FilteredAvailability)
            {
                <MudPaper Elevation="0" Class="timeslot-day">
                    <MudText Typo="Typo.subtitle1">@FormatDate(day.Date)</MudText>
                    <MudChipSet T="TimeSlotOption" Class="timeslot-chipset">
                        @foreach (var slot in day.Slots)
                        {
                            <MudChip T="TimeSlotOption"
                                     Value="slot"
                                     Class="timeslot-chip"
                                     Color="Color.Primary"
                                     Variant="Variant.Outlined"
                                     Disabled="@slot.IsReserved"
                                     Selected="@IsSelected(day.Date, slot)"
                                     OnClick="() => HandleSelection(day.Date, slot)">
                                @slot.DisplayLabel
                            </MudChip>
                        }
                    </MudChipSet>
                </MudPaper>
            }
        </MudStack>
    }
</MudStack>

@code {
    [Parameter]
    public ClinicSummary? Clinic { get; set; }

    [Parameter]
    public IReadOnlyList<DailyAvailability> Availability { get; set; } = Array.Empty<DailyAvailability>();

    [Parameter]
    public DateRange SelectedRange { get; set; } = new();

    [Parameter]
    public EventCallback<DateRange> SelectedRangeChanged { get; set; }

    [Parameter]
    public ScheduledSlot? SelectedSlot { get; set; }

    [Parameter]
    public EventCallback<ScheduledSlot?> SelectedSlotChanged { get; set; }

    private DateRange DateRangeSelection
    {
        get => SelectedRange;
        set
        {
            if (value is null)
            {
                if (SelectedRange.Start is null && SelectedRange.End is null)
                {
                    return;
                }

                _ = SelectedRangeChanged.InvokeAsync(new DateRange());
                return;
            }

            if (SelectedRange.Start == value.Start && SelectedRange.End == value.End)
            {
                return;
            }

            _ = SelectedRangeChanged.InvokeAsync(value);
        }
    }

    private IReadOnlyList<DailyAvailability> FilteredAvailability => Availability
        .Where(day => IsWithinRange(day.Date))
        .OrderBy(day => day.Date)
        .ToList();

    private bool DisableDatePicker => Clinic is null || Availability.Count == 0;

    private DateTime? MinDate => Availability.Count == 0
        ? null
        : Availability.Min(a => a.Date).ToDateTime(TimeOnly.MinValue);

    private DateTime? MaxDate => Availability.Count == 0
        ? null
        : Availability.Max(a => a.Date).ToDateTime(TimeOnly.MinValue);

    private static string FormatDate(DateOnly date) => date.ToDateTime(TimeOnly.MinValue).ToString("dddd, MMM d");

    private bool IsSelected(DateOnly date, TimeSlotOption slot) => SelectedSlot is not null
        && SelectedSlot.Date == date
        && SelectedSlot.Slot.StartTime == slot.StartTime;

    private bool IsWithinRange(DateOnly date)
    {
        if (SelectedRange.Start is null || SelectedRange.End is null)
        {
            return true;
        }

        var start = DateOnly.FromDateTime(SelectedRange.Start.Value);
        var end = DateOnly.FromDateTime(SelectedRange.End.Value);

        return date >= start && date <= end;
    }

    private Task HandleSelection(DateOnly date, TimeSlotOption slot)
    {
        if (slot.IsReserved)
        {
            return Task.CompletedTask;
        }

        if (SelectedSlot is not null
            && SelectedSlot.Date == date
            && SelectedSlot.Slot.StartTime == slot.StartTime)
        {
            return SelectedSlotChanged.InvokeAsync(null);
        }

        return SelectedSlotChanged.InvokeAsync(new ScheduledSlot(date, slot));
    }
}
