@page "/"
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Net
@using Contracts.Account
@using Contracts.Bookings
@using Contracts.Clinics
@using UI.Services
@inject BookingApiClient BookingApiClient
@inject AuthState AuthState
@implements IDisposable

<PageTitle>Book an appointment</PageTitle>

<div class="home-wrapper">
    <div class="dx-card home-card">
        <h1 class="page-title">Book an appointment</h1>
        <p class="page-lead">Choose a clinic, pick a date, and reserve a slot in just a few clicks.</p>

        @if (_clinicsLoadError is not null)
        {
            <div class="dx-alert dx-alert-danger">@_clinicsLoadError</div>
        }
        else if (_isLoadingClinics)
        {
            <div class="loading-card">
                <DxLoadIndicator CssClass="loading-indicator" />
                <span class="loading-text">Loading clinics...</span>
            </div>
        }
        else if (!HasClinics)
        {
            <div class="dx-alert dx-alert-warning">No clinics are currently available for booking.</div>
        }
        else
        {
            <EditForm Model="_bookingForm" OnValidSubmit="SubmitAsync" class="booking-form">
                <DataAnnotationsValidator />

                <section class="clinic-section">
                    <header class="section-heading">
                        <h2 class="section-title">Clinics</h2>
                        <p class="section-caption">Select a clinic to view available slots.</p>
                    </header>
                    <GuestNotice />

                    <DxListBox TData="ClinicSummaryDto"
                               TValue="int?"
                               Data="@_clinicSummary!.Clinics"
                               CssClass="clinic-list"
                               SelectionMode="ListBoxSelectionMode.Single"
                               ValueFieldName="Id"
                               Value="@SelectedClinicId"
                               ValueChanged="OnClinicSelected"
                               Enabled="@(!_isSubmitting)">
                        <ItemTemplate Context="clinic">
                            <article class="clinic-card">
                                <div class="clinic-card-header">
                                    <span class="clinic-name">@clinic.Name</span>
                                </div>
                                <span class="clinic-location">@FormatLocation(clinic.City, clinic.Province)</span>
                                @if (SelectedClinicId == clinic.Id)
                                {
                                    <span class="clinic-status">@GetSelectedClinicStatus()</span>
                                }
                                else
                                {
                                    <span class="clinic-hint">View availability for @SelectedDateShort</span>
                                }
                            </article>
                        </ItemTemplate>
                    </DxListBox>
                    <ValidationMessage For="() => _bookingForm.ClinicId" class="validation" />

                    <div class="availability-section">
                        <div class="availability-toolbar">
                            <div class="availability-heading">
                                <div class="availability-title">@SelectedClinicHeading</div>
                                <div class="availability-subtitle">@SelectedClinicSubtitle</div>
                                <div class="availability-date">@SelectedDateLong</div>
                            </div>
                            <div class="date-picker" aria-label="Select appointment date">
                                <span class="date-picker-icon" aria-hidden="true">ðŸ“…</span>
                                <DxDateEdit @bind-Date="SelectedDate"
                                           MinDate="@DateTime.Today"
                                           DisplayFormat="dddd, dd MMMM yyyy"
                                           CssClass="date-picker-editor"
                                           Enabled="@(!_isSubmitting)" />
                            </div>
                        </div>

                        @if (_isLoadingAvailability)
                        {
                            <div class="loading-inline">
                                <DxLoadIndicator CssClass="loading-indicator small" />
                                <span>Checking availability...</span>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(_availabilityError))
                        {
                            <div class="dx-alert dx-alert-warning">@_availabilityError</div>
                        }
                        else if (!_isLoadingAvailability && _availableSlots.Count == 0)
                        {
                            <div class="dx-alert dx-alert-info">Select a different date to see more availability.</div>
                        }

                        <DxListBox TData="AvailableSlotResponse"
                                   TValue="int?"
                                   Data="@_availableSlots"
                                   CssClass="slot-list"
                                   SelectionMode="ListBoxSelectionMode.Single"
                                   ValueFieldName="Id"
                                   Value="@_bookingForm.AppointmentSlotId"
                                   ValueChanged="OnSlotSelected"
                                   Enabled="@(!_isLoadingAvailability && !_isSubmitting)">
                            <ItemTemplate Context="slot">
                                <div class="slot-pill">@FormatSlotRange(slot)</div>
                            </ItemTemplate>
                        </DxListBox>
                        <ValidationMessage For="() => _bookingForm.AppointmentSlotId" class="validation" />
                    </div>
                </section>

                <section class="details-section">
                    <div class="section-header">Patient details</div>
                    <div class="details-grid">
                        <div class="dx-field">
                            <div class="dx-field-label">Full name</div>
                            <div class="dx-field-value">
                                <InputText class="dx-texteditor dx-editor-outlined"
                                           @bind-Value="_bookingForm.PatientName"
                                           disabled="@_isSubmitting" />
                                <ValidationMessage For="() => _bookingForm.PatientName" class="validation" />
                            </div>
                        </div>
                        <div class="dx-field">
                            <div class="dx-field-label">Email</div>
                            <div class="dx-field-value">
                                <InputText class="dx-texteditor dx-editor-outlined"
                                           @bind-Value="_bookingForm.PatientEmail"
                                           disabled="@_isSubmitting" />
                                <ValidationMessage For="() => _bookingForm.PatientEmail" class="validation" />
                            </div>
                        </div>
                        <div class="dx-field">
                            <div class="dx-field-label">Notes (optional)</div>
                            <div class="dx-field-value">
                                <InputTextArea class="dx-texteditor dx-editor-outlined"
                                               @bind-Value="_bookingForm.Notes"
                                               disabled="@_isSubmitting"
                                               rows="3" />
                                <ValidationMessage For="() => _bookingForm.Notes" class="validation" />
                            </div>
                        </div>
                    </div>
                </section>

                <section class="submission-section">
                    @if (!string.IsNullOrEmpty(_submissionError))
                    {
                        <div class="dx-alert dx-alert-danger">@_submissionError</div>
                    }

                    <button type="submit"
                            class="dx-button dx-button-mode-contained dx-button-type-success submit-button"
                            disabled="@(_isSubmitting || _bookingForm.AppointmentSlotId is null)">
                        <span class="dx-button-content">@(_isSubmitting ? "Booking..." : "Book appointment")</span>
                    </button>
                </section>
            </EditForm>

            @if (_confirmation is not null)
            {
                <div class="dx-card confirmation-card">
                    <h2 class="section-header">Booking confirmed!</h2>
                    <p class="confirmation-text">
                        Your appointment at <strong>@_confirmation.ClinicName</strong> is scheduled for
                        <strong>@_confirmation.StartTime.ToLocalTime().ToString("dddd, dd MMMM yyyy HH:mm")</strong>.
                    </p>
                    <ul class="confirmation-list">
                        <li><strong>Patient:</strong> @_confirmation.PatientName (@_confirmation.PatientEmail)</li>
                        @if (!string.IsNullOrWhiteSpace(_confirmation.Notes))
                        {
                            <li><strong>Notes:</strong> @_confirmation.Notes</li>
                        }
                    </ul>
                </div>
            }
        }
    </div>
</div>

@code {
    private readonly BookingFormModel _bookingForm = new();
    private readonly List<AvailableSlotResponse> _availableSlots = [];
    private ClinicSummaryResponse? _clinicSummary;
    private string? _clinicsLoadError;
    private bool _isLoadingClinics;
    private bool _isLoadingAvailability;
    private string? _availabilityError;
    private bool _isSubmitting;
    private string? _submissionError;
    private BookingDetailsResponse? _confirmation;
    private DateOnly _selectedDate = DateOnly.FromDateTime(DateTime.Today);
    private CancellationTokenSource? _availabilityCts;

    private bool HasClinics => _clinicSummary?.Clinics.Count > 0;

    private int? SelectedClinicId => _bookingForm.ClinicId > 0 ? _bookingForm.ClinicId : null;

    private ClinicSummaryDto? SelectedClinic => _clinicSummary?.Clinics.Find(clinic => clinic.Id == _bookingForm.ClinicId);

    private string SelectedClinicHeading => SelectedClinic is { } clinic
        ? $"Available slots for {clinic.Name}"
        : "Available slots";

    private string SelectedClinicSubtitle => SelectedClinic is { } clinic
        ? FormatLocation(clinic.City, clinic.Province)
        : "Choose a clinic to display its available slots.";

    private string SelectedDateLong => _selectedDate.ToString("dddd, dd MMMM yyyy", CultureInfo.CurrentCulture);

    private string SelectedDateShort => _selectedDate.ToString("MMM d", CultureInfo.CurrentCulture);

    private DateTime SelectedDate
    {
        get => _selectedDate.ToDateTime(TimeOnly.MinValue);
        set
        {
            var newDate = DateOnly.FromDateTime(value);
            if (newDate == _selectedDate)
            {
                return;
            }

            _selectedDate = newDate;
            _bookingForm.AppointmentSlotId = null;
            _ = InvokeAsync(() => LoadAvailabilityAsync());
        }
    }

    protected override void OnInitialized()
    {
        AuthState.StateChanged += OnAuthStateChanged;
        ApplyUserDetails(AuthState.CurrentUser);
    }

    protected override Task OnInitializedAsync() => LoadClinicsAsync();

    private async Task LoadClinicsAsync()
    {
        _clinicsLoadError = null;
        _isLoadingClinics = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            _clinicSummary = await BookingApiClient.GetClinicsAsync();

            if (HasClinics)
            {
                var clinics = _clinicSummary!.Clinics;
                if (_bookingForm.ClinicId == 0 || !clinics.Exists(clinic => clinic.Id == _bookingForm.ClinicId))
                {
                    _bookingForm.ClinicId = clinics[0].Id;
                }

                await LoadAvailabilityAsync();
            }
            else
            {
                _bookingForm.ClinicId = 0;
                _bookingForm.AppointmentSlotId = null;
                _availableSlots.Clear();
            }
        }
        catch (Exception)
        {
            _clinicsLoadError = "We couldn't load clinics at the moment. Please try again later.";
            _clinicSummary = null;
            _bookingForm.ClinicId = 0;
            _bookingForm.AppointmentSlotId = null;
            _availableSlots.Clear();
        }
        finally
        {
            _isLoadingClinics = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnClinicSelected(int? clinicId)
    {
        if (clinicId is null || clinicId.Value <= 0 || clinicId.Value == _bookingForm.ClinicId)
        {
            return;
        }

        _bookingForm.ClinicId = clinicId.Value;
        _bookingForm.AppointmentSlotId = null;
        _ = InvokeAsync(() => LoadAvailabilityAsync());
    }

    private async Task LoadAvailabilityAsync(bool preserveOutcome = false)
    {
        _availabilityCts?.Cancel();
        _availabilityCts?.Dispose();
        _availabilityCts = null;
        if (!preserveOutcome)
        {
            _confirmation = null;
            _submissionError = null;
        }

        if (_bookingForm.ClinicId == 0)
        {
            _availableSlots.Clear();
            _availabilityError = null;
            _isLoadingAvailability = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        var cts = new CancellationTokenSource();
        _availabilityCts = cts;

        _isLoadingAvailability = true;
        _availabilityError = null;
        await InvokeAsync(StateHasChanged);

        try
        {
            var slots = await BookingApiClient.GetAvailabilityAsync(_bookingForm.ClinicId, _selectedDate, cts.Token);
            _availableSlots.Clear();
            _availableSlots.AddRange(slots);

            if (_availableSlots.Count == 0)
            {
                _bookingForm.AppointmentSlotId = null;
            }
        }
        catch (HttpRequestException ex) when (ex.StatusCode is HttpStatusCode.Unauthorized or HttpStatusCode.Forbidden)
        {
            _availabilityError = "Please log in to view the clinic availability.";
            _availableSlots.Clear();
            _bookingForm.AppointmentSlotId = null;
        }
        catch (OperationCanceledException) when (cts.IsCancellationRequested)
        {
            return;
        }
        catch (Exception)
        {
            _availabilityError = "We couldn't retrieve availability. Please try again.";
            _availableSlots.Clear();
            _bookingForm.AppointmentSlotId = null;
        }
        finally
        {
            if (!cts.IsCancellationRequested)
            {
                _isLoadingAvailability = false;
                await InvokeAsync(StateHasChanged);
            }

            _availabilityCts?.Dispose();
            _availabilityCts = null;
        }
    }

    private void OnSlotSelected(int? slotId)
    {
        _bookingForm.AppointmentSlotId = slotId;
        _submissionError = null;
    }

    private string GetSelectedClinicStatus()
    {
        if (_isLoadingAvailability)
        {
            return "Loading slots...";
        }

        if (!string.IsNullOrEmpty(_availabilityError))
        {
            return _availabilityError!;
        }

        if (_availableSlots.Count == 0)
        {
            return $"No slots on {SelectedDateShort}";
        }

        var count = _availableSlots.Count;
        var suffix = count == 1 ? "slot" : "slots";
        return $"{count} available {suffix} on {SelectedDateShort}";
    }

    private async Task SubmitAsync()
    {
        _submissionError = null;
        _confirmation = null;

        if (_bookingForm.AppointmentSlotId is null)
        {
            _submissionError = "Please select an available slot.";
            await InvokeAsync(StateHasChanged);
            return;
        }

        _isSubmitting = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var request = new BookingRequest
            {
                ClinicId = _bookingForm.ClinicId,
                AppointmentSlotId = _bookingForm.AppointmentSlotId.Value,
                PatientName = _bookingForm.PatientName,
                PatientEmail = _bookingForm.PatientEmail,
                Notes = string.IsNullOrWhiteSpace(_bookingForm.Notes) ? null : _bookingForm.Notes
            };

            _confirmation = await BookingApiClient.CreateBookingAsync(request);
            _availableSlots.RemoveAll(slot => slot.Id == request.AppointmentSlotId);
            _bookingForm.AppointmentSlotId = null;
        }
        catch (HttpRequestException ex) when (ex.StatusCode is HttpStatusCode.Unauthorized or HttpStatusCode.Forbidden)
        {
            _submissionError = "You need to be logged in to complete a booking.";
        }
        catch (Exception)
        {
            _submissionError = "We couldn't save the booking. Please try again.";
        }
        finally
        {
            _isSubmitting = false;
            await LoadAvailabilityAsync(preserveOutcome: true);
        }
    }

    private static string FormatLocation(string? city, string? province)
    {
        if (string.IsNullOrWhiteSpace(city) && string.IsNullOrWhiteSpace(province))
        {
            return "Location to be confirmed";
        }

        if (string.IsNullOrWhiteSpace(city))
        {
            return province!;
        }

        if (string.IsNullOrWhiteSpace(province))
        {
            return city!;
        }

        return $"{city}, {province}";
    }

    private static string FormatSlotRange(AvailableSlotResponse slot) =>
        $"{slot.StartTime.ToLocalTime():HH:mm} - {slot.EndTime.ToLocalTime():HH:mm}";

    private void OnAuthStateChanged()
    {
        ApplyUserDetails(AuthState.CurrentUser);
        _ = InvokeAsync(() => LoadAvailabilityAsync());
    }

    private void ApplyUserDetails(LoginResponse? user)
    {
        if (user is null)
            return;

        _bookingForm.PatientEmail = user.Email;
        if (string.IsNullOrWhiteSpace(_bookingForm.PatientName))
            _bookingForm.PatientName = user.DisplayName;
    }

    public void Dispose()
    {
        AuthState.StateChanged -= OnAuthStateChanged;
        _availabilityCts?.Cancel();
        _availabilityCts?.Dispose();
        _availabilityCts = null;
    }

    private sealed class BookingFormModel
    {
        [Range(1, int.MaxValue, ErrorMessage = "Select a clinic")]
        public int ClinicId { get; set; }

        [Required(ErrorMessage = "Select a slot")]
        public int? AppointmentSlotId { get; set; }

        [Required]
        [StringLength(128)]
        public string PatientName { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string PatientEmail { get; set; } = string.Empty;

        [StringLength(512)]
        public string? Notes { get; set; }
    }
}
