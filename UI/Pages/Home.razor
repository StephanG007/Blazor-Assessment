@page "/"
@using System.Net
@using System.ComponentModel.DataAnnotations
@using Contracts.Account
@using Contracts.Bookings
@using Contracts.Clinics
@using UI.Services
@inject BookingApiClient BookingApiClient
@inject AuthState AuthState
@inject IJSRuntime JS
@implements IDisposable
@implements IAsyncDisposable

<PageTitle>Book an appointment</PageTitle>

<div class="home-wrapper">
    <div class="dx-card home-card">
        <h1 class="page-title">Book an appointment</h1>
        <p class="page-lead">Choose a clinic, pick a date, and reserve a slot in just a few clicks.</p>

        @if (_clinicsLoadError is not null)
        {
            <div class="dx-alert dx-alert-danger">@_clinicsLoadError</div>
        }
        else if (_clinicSummary is null)
        {
            <div class="loading-card">
                <div id="clinicLoader" class="dx-loadindicator"></div>
                <span class="loading-text">Loading clinics...</span>
            </div>
        }
        else if (_clinicSummary.Clinics.Count == 0)
        {
            <div class="dx-alert dx-alert-warning">No clinics are currently available for booking.</div>
        }
        else
        {
            <EditForm Model="_bookingForm" OnValidSubmit="SubmitAsync" class="booking-form">
                <DataAnnotationsValidator />

                <div class="dx-fieldset fieldset-grid">
                    <div class="dx-field">
                        <div class="dx-field-label">Clinic</div>
                        <div class="dx-field-value">
                            <div id="clinicSelect" class="dx-field-value-control"></div>
                        </div>
                    </div>
                    <div class="dx-field">
                        <div class="dx-field-label">Date</div>
                        <div class="dx-field-value">
                            <div id="bookingDate" class="dx-field-value-control"></div>
                        </div>
                    </div>
                </div>

                <section class="availability-section">
                    <div class="section-header">Available slots</div>

                    @if (!string.IsNullOrEmpty(_availabilityError))
                    {
                        <div class="dx-alert dx-alert-warning">@_availabilityError</div>
                    }

                    <div class="loading-inline" hidden="@(!_isLoadingAvailability)">
                        <div id="availabilityLoader" class="dx-loadindicator small"></div>
                        <span>Checking availability...</span>
                    </div>

                    @if (!_isLoadingAvailability && string.IsNullOrEmpty(_availabilityError) && _availableSlots.Count == 0)
                    {
                        <div class="dx-alert dx-alert-info">No open slots for the selected date.</div>
                    }

                    <div id="slotList" class="slot-list"></div>
                    <ValidationMessage For="() => _bookingForm.AppointmentSlotId" class="validation" />
                </section>

                <section class="details-section">
                    <div class="section-header">Patient details</div>
                    <div class="details-grid">
                        <div class="dx-field">
                            <div class="dx-field-label">Full name</div>
                            <div class="dx-field-value">
                                <InputText class="dx-texteditor dx-editor-outlined"
                                           @bind-Value="_bookingForm.PatientName"
                                           disabled="@_isSubmitting" />
                                <ValidationMessage For="() => _bookingForm.PatientName" class="validation" />
                            </div>
                        </div>
                        <div class="dx-field">
                            <div class="dx-field-label">Email</div>
                            <div class="dx-field-value">
                                <InputText class="dx-texteditor dx-editor-outlined"
                                           @bind-Value="_bookingForm.PatientEmail"
                                           disabled="@_isSubmitting" />
                                <ValidationMessage For="() => _bookingForm.PatientEmail" class="validation" />
                            </div>
                        </div>
                        <div class="dx-field">
                            <div class="dx-field-label">Notes (optional)</div>
                            <div class="dx-field-value">
                                <InputTextArea class="dx-texteditor dx-editor-outlined"
                                               @bind-Value="_bookingForm.Notes"
                                               disabled="@_isSubmitting"
                                               rows="3" />
                                <ValidationMessage For="() => _bookingForm.Notes" class="validation" />
                            </div>
                        </div>
                    </div>
                </section>

                <section class="submission-section">
                    @if (!string.IsNullOrEmpty(_submissionError))
                    {
                        <div class="dx-alert dx-alert-danger">@_submissionError</div>
                    }

                    <button type="submit"
                            class="dx-button dx-button-mode-contained dx-button-type-success submit-button"
                            disabled="@(_isSubmitting || _bookingForm.AppointmentSlotId is null)">
                        <span class="dx-button-content">@(_isSubmitting ? "Booking..." : "Book appointment")</span>
                    </button>
                </section>
            </EditForm>

            @if (_confirmation is not null)
            {
                <div class="dx-card confirmation-card">
                    <h2 class="section-header">Booking confirmed!</h2>
                    <p class="confirmation-text">
                        Your appointment at <strong>@_confirmation.ClinicName</strong> is scheduled for
                        <strong>@_confirmation.StartTime.ToLocalTime().ToString("dddd, dd MMMM yyyy HH:mm")</strong>.
                    </p>
                    <ul class="confirmation-list">
                        <li><strong>Patient:</strong> @_confirmation.PatientName (@_confirmation.PatientEmail)</li>
                        @if (!string.IsNullOrWhiteSpace(_confirmation.Notes))
                        {
                            <li><strong>Notes:</strong> @_confirmation.Notes</li>
                        }
                    </ul>
                </div>
            }
        }
    </div>
</div>

@code {
    private readonly BookingFormModel _bookingForm = new();
    private ClinicSummaryResponse? _clinicSummary;
    private string? _clinicsLoadError;
    private bool _isLoadingAvailability;
    private string? _availabilityError;
    private List<AvailableSlotResponse> _availableSlots = new();
    private DateOnly _selectedDate = DateOnly.FromDateTime(DateTime.Today);
    private bool _isSubmitting;
    private string? _submissionError;
    private BookingDetailsResponse? _confirmation;
    private IJSObjectReference? _bookingModule;
    private DotNetObjectReference<Home>? _dotNetRef;

    private DateTime SelectedDateTime => _selectedDate.ToDateTime(TimeOnly.MinValue);

    protected override async Task OnInitializedAsync()
    {
        AuthState.StateChanged += OnAuthStateChanged;
        ApplyUserDetails(AuthState.CurrentUser);
        await LoadClinicsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        _bookingModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/booking.js");
        _dotNetRef = DotNetObjectReference.Create(this);
        await _bookingModule.InvokeVoidAsync("initialize", _dotNetRef);

        await SyncClinicsAsync();
        await SyncDateAsync();
        await SyncSlotsAsync();
        await SyncSubmissionStateAsync();
    }

    private async Task LoadClinicsAsync()
    {
        _clinicsLoadError = null;

        try
        {
            _clinicSummary = await BookingApiClient.GetClinicsAsync();
            if (_clinicSummary?.Clinics.Count > 0 && _bookingForm.ClinicId == 0)
            {
                _bookingForm.ClinicId = _clinicSummary.Clinics[0].Id;
            }

            await SyncClinicsAsync();
            await LoadAvailabilityAsync();
        }
        catch (Exception)
        {
            _clinicsLoadError = "We couldn't load clinics at the moment. Please try again later.";
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadAvailabilityAsync()
    {
        _availabilityError = null;
        _confirmation = null;
        _availableSlots.Clear();

        if (_bookingForm.ClinicId == 0)
        {
            await SyncSlotsAsync();
            await InvokeAsync(StateHasChanged);
            return;
        }

        _isLoadingAvailability = true;
        await SyncSlotsAsync();
        await InvokeAsync(StateHasChanged);

        try
        {
            var slots = await BookingApiClient.GetAvailabilityAsync(_bookingForm.ClinicId, _selectedDate);
            _availableSlots = slots.ToList();
            if (!_availableSlots.Any())
            {
                _bookingForm.AppointmentSlotId = null;
            }
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.Unauthorized || ex.StatusCode == HttpStatusCode.Forbidden)
        {
            _availabilityError = "Please log in to view the clinic availability.";
            _bookingForm.AppointmentSlotId = null;
        }
        catch (Exception)
        {
            _availabilityError = "We couldn't retrieve availability. Please try again.";
            _bookingForm.AppointmentSlotId = null;
        }
        finally
        {
            _isLoadingAvailability = false;
            await SyncSlotsAsync();
            await InvokeAsync(StateHasChanged);
        }
    }

    [JSInvokable]
    public Task OnClinicChangedFromJs(int clinicId) => OnClinicChanged(clinicId);

    private async Task OnClinicChanged(int clinicId)
    {
        if (_bookingForm.ClinicId == clinicId)
        {
            return;
        }

        _bookingForm.ClinicId = clinicId;
        _bookingForm.AppointmentSlotId = null;
        await SyncClinicsAsync();
        await LoadAvailabilityAsync();
    }

    [JSInvokable]
    public Task OnDateChangedFromJs(string? isoDate)
    {
        if (string.IsNullOrWhiteSpace(isoDate))
        {
            return Task.CompletedTask;
        }

        if (!DateTime.TryParse(isoDate, out var parsed))
        {
            return Task.CompletedTask;
        }

        return OnDateChanged(parsed);
    }

    private async Task OnDateChanged(DateTime date)
    {
        var newDate = DateOnly.FromDateTime(date);
        if (newDate == _selectedDate)
        {
            return;
        }

        _selectedDate = newDate;
        _bookingForm.AppointmentSlotId = null;
        await SyncDateAsync();
        await LoadAvailabilityAsync();
    }

    [JSInvokable]
    public async Task OnSlotSelectedFromJs(int? slotId)
    {
        if (slotId is null)
        {
            _bookingForm.AppointmentSlotId = null;
            await InvokeAsync(StateHasChanged);
            return;
        }

        SelectSlot(slotId.Value);
        await InvokeAsync(StateHasChanged);
    }

    private void SelectSlot(int slotId)
    {
        _bookingForm.AppointmentSlotId = slotId;
        _submissionError = null;
    }

    private async Task SubmitAsync()
    {
        _submissionError = null;
        _confirmation = null;

        if (_bookingForm.AppointmentSlotId is null)
        {
            _submissionError = "Please select an available slot.";
            await InvokeAsync(StateHasChanged);
            return;
        }

        _isSubmitting = true;
        await SyncSubmissionStateAsync();

        try
        {
            var request = new BookingRequest
            {
                ClinicId = _bookingForm.ClinicId,
                AppointmentSlotId = _bookingForm.AppointmentSlotId.Value,
                PatientName = _bookingForm.PatientName,
                PatientEmail = _bookingForm.PatientEmail,
                Notes = string.IsNullOrWhiteSpace(_bookingForm.Notes) ? null : _bookingForm.Notes
            };

            _confirmation = await BookingApiClient.CreateBookingAsync(request);
            _availableSlots = _availableSlots.Where(slot => slot.Id != request.AppointmentSlotId).ToList();
            _bookingForm.AppointmentSlotId = null;
            await SyncSlotsAsync();
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.Unauthorized || ex.StatusCode == HttpStatusCode.Forbidden)
        {
            _submissionError = "You need to be logged in to complete a booking.";
        }
        catch (Exception)
        {
            _submissionError = "We couldn't save the booking. Please try again.";
        }
        finally
        {
            _isSubmitting = false;
            await SyncSubmissionStateAsync();
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task SyncClinicsAsync()
    {
        if (_bookingModule is null || _clinicSummary is null)
        {
            return;
        }

        var clinics = _clinicSummary.Clinics.Select(clinic => new
        {
            id = clinic.Id,
            name = clinic.Name,
            city = clinic.City,
            province = clinic.Province
        });

        await _bookingModule.InvokeVoidAsync("setClinics", clinics, _bookingForm.ClinicId);
    }

    private async Task SyncDateAsync()
    {
        if (_bookingModule is null)
        {
            return;
        }

        await _bookingModule.InvokeVoidAsync("setDate", SelectedDateTime.ToString("o"));
    }

    private async Task SyncSlotsAsync()
    {
        if (_bookingModule is null)
        {
            return;
        }

        var slots = _availableSlots.Select(slot => new
        {
            id = slot.Id,
            label = $"{slot.StartTime.ToLocalTime():HH:mm} - {slot.EndTime.ToLocalTime():HH:mm}"
        });

        await _bookingModule.InvokeVoidAsync("setSlots", slots, _bookingForm.AppointmentSlotId, _isLoadingAvailability);
    }

    private async Task SyncSubmissionStateAsync()
    {
        if (_bookingModule is null)
        {
            return;
        }

        await _bookingModule.InvokeVoidAsync("setSubmissionState", _isSubmitting);
    }

    private async Task OnAuthStateChangedAsync()
    {
        ApplyUserDetails(AuthState.CurrentUser);
        await LoadAvailabilityAsync();
        StateHasChanged();
    }

    private void OnAuthStateChanged()
    {
        _ = InvokeAsync(OnAuthStateChangedAsync);
    }

    private void ApplyUserDetails(LoginResponse? user)
    {
        if (user is null)
        {
            return;
        }

        _bookingForm.PatientEmail = user.Email;
        if (string.IsNullOrWhiteSpace(_bookingForm.PatientName))
        {
            _bookingForm.PatientName = user.DisplayName;
        }
    }

    public void Dispose()
    {
        AuthState.StateChanged -= OnAuthStateChanged;
    }

    public async ValueTask DisposeAsync()
    {
        AuthState.StateChanged -= OnAuthStateChanged;
        if (_bookingModule is not null)
        {
            await _bookingModule.DisposeAsync();
        }

        _dotNetRef?.Dispose();
    }

    private sealed class BookingFormModel
    {
        [Range(1, int.MaxValue, ErrorMessage = "Select a clinic")]
        public int ClinicId { get; set; }

        [Required(ErrorMessage = "Select a slot")]
        public int? AppointmentSlotId { get; set; }

        [Required]
        [StringLength(128)]
        public string PatientName { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string PatientEmail { get; set; } = string.Empty;

        [StringLength(512)]
        public string? Notes { get; set; }
    }
}
