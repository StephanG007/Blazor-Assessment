@page "/"
@using System.Net
@using System.ComponentModel.DataAnnotations
@using Contracts.Account
@using Contracts.Bookings
@using Contracts.Clinics
@using UI.Services
@inject BookingApiClient BookingApiClient
@inject AuthState AuthState
@implements IDisposable

<PageTitle>Book an appointment</PageTitle>

<MudStack Spacing="2" Class="home-wrapper">
    <MudText Typo="Typo.h3" Class="page-title">Book an appointment</MudText>
    <MudText Typo="Typo.subtitle1" Class="page-lead">Choose a clinic, pick a date, and reserve a slot in just a few clicks.</MudText>

    @if (_clinicsLoadError is not null)
    {
        <MudAlert Severity="Severity.Error">@_clinicsLoadError</MudAlert>
    }
    else if (_clinicSummary is null)
    {
        <MudPaper Elevation="0" Class="pa-6 d-flex flex-column align-items-center gap-3">
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
            <MudText Typo="Typo.subtitle2" Color="Color.Primary">Loading clinics...</MudText>
        </MudPaper>
    }
    else if (_clinicSummary.Clinics.Count == 0)
    {
        <MudAlert Severity="Severity.Info">No clinics are currently available for booking.</MudAlert>
    }
    else
    {
        <EditForm Model="_bookingForm" OnValidSubmit="SubmitAsync">
            <DataAnnotationsValidator />
            <MudPaper Elevation="1" Class="pa-6">
                <MudStack Spacing="3">
                    <MudGrid Spacing="2">
                        <MudItem xs="12" md="6">
                            <MudSelect T="int"
                                       Label="Clinic"
                                       Value="_bookingForm.ClinicId"
                                       ValueChanged="OnClinicChanged"
                                       ValueExpression="@(() => _bookingForm.ClinicId)"
                                       Variant="Variant.Outlined"
                                       Dense="true"
                                       Required="true">
                                @foreach (var clinic in _clinicSummary.Clinics)
                                {
                                    <MudSelectItem Value="@clinic.Id">@clinic.Name (@clinic.City, @clinic.Province)</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudDatePicker Label="Date"
                                           Date="SelectedDateTime"
                                           DateChanged="OnDateChanged"
                                           MinDate="DateTime.Today"
                                           PickerVariant="PickerVariant.Inline"
                                           DisableToolbar="true"
                                           Variant="Variant.Outlined"
                                           Dense="true" />
                        </MudItem>
                    </MudGrid>

                    <MudDivider />

                    <MudStack Spacing="1">
                        <MudText Typo="Typo.h6" Class="section-title">Available slots</MudText>
                        @if (!string.IsNullOrEmpty(_availabilityError))
                        {
                            <MudAlert Severity="Severity.Warning">@_availabilityError</MudAlert>
                        }
                        else if (_isLoadingAvailability)
                        {
                            <MudStack Direction="Row" AlignItems="AlignItems.Center" Spacing="1">
                                <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Medium" />
                                <MudText Typo="Typo.body2" Color="Color.Primary">Checking availability...</MudText>
                            </MudStack>
                        }
                        else if (_availableSlots.Count == 0)
                        {
                            <MudAlert Severity="Severity.Info">No open slots for the selected date.</MudAlert>
                        }
                        else
                        {
                            <MudGrid Spacing="2">
                                @foreach (var slot in _availableSlots)
                                {
                                    var isSelected = _bookingForm.AppointmentSlotId == slot.Id;
                                    <MudItem xs="12" sm="6" md="4" lg="3" @key="slot.Id">
                                        <MudButton Variant="Variant.Filled"
                                                   Color="@(isSelected ? Color.Secondary : Color.Primary)"
                                                   FullWidth="true"
                                                   DisableElevation="true"
                                                   Disabled="@_isSubmitting"
                                                   OnClick="() => SelectSlot(slot.Id)">
                                            <MudText Typo="Typo.body2" Class="slot-time">
                                                @slot.StartTime.ToLocalTime().ToString("HH:mm") - @slot.EndTime.ToLocalTime().ToString("HH:mm")
                                            </MudText>
                                        </MudButton>
                                    </MudItem>
                                }
                            </MudGrid>
                            <ValidationMessage For="() => _bookingForm.AppointmentSlotId" class="mud-error-text" />
                        }
                    </MudStack>

                    <MudDivider />

                    <MudStack Spacing="1">
                        <MudText Typo="Typo.h6" Class="section-title">Patient details</MudText>
                        <MudGrid Spacing="2">
                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="_bookingForm.PatientName"
                                              For="@(() => _bookingForm.PatientName)"
                                              Label="Full name"
                                              Variant="Variant.Outlined"
                                              Required="true" />
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="_bookingForm.PatientEmail"
                                              For="@(() => _bookingForm.PatientEmail)"
                                              Label="Email"
                                              Variant="Variant.Outlined"
                                              Required="true" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="_bookingForm.Notes"
                                              For="@(() => _bookingForm.Notes)"
                                              Label="Notes (optional)"
                                              Variant="Variant.Outlined"
                                              Lines="3" />
                            </MudItem>
                        </MudGrid>
                    </MudStack>

                    <MudStack Spacing="1" AlignItems="AlignItems.Start">
                        @if (!string.IsNullOrEmpty(_submissionError))
                        {
                            <MudAlert Severity="Severity.Error">@_submissionError</MudAlert>
                        }
                        <MudButton ButtonType="ButtonType.Submit"
                                   Color="Color.Success"
                                   Variant="Variant.Filled"
                                   Disabled="@(_isSubmitting || _bookingForm.AppointmentSlotId is null)"
                                   Loading="@_isSubmitting">
                            Book appointment
                        </MudButton>
                    </MudStack>
                </MudStack>
            </MudPaper>
        </EditForm>

        @if (_confirmation is not null)
        {
            <MudPaper Elevation="1" Class="pa-6 confirmation-card">
                <MudStack Spacing="1">
                    <MudText Typo="Typo.h5">Booking confirmed!</MudText>
                    <MudText Typo="Typo.body1">
                        Your appointment at <b>@_confirmation.ClinicName</b> is scheduled for
                        <b>@_confirmation.StartTime.ToLocalTime().ToString("dddd, dd MMMM yyyy HH:mm")</b>.
                    </MudText>
                    <MudList Dense="true">
                        <MudListItem><MudText Typo="Typo.body2"><b>Patient:</b> @_confirmation.PatientName (@_confirmation.PatientEmail)</MudText></MudListItem>
                        @if (!string.IsNullOrWhiteSpace(_confirmation.Notes))
                        {
                            <MudListItem><MudText Typo="Typo.body2"><b>Notes:</b> @_confirmation.Notes</MudText></MudListItem>
                        }
                    </MudList>
                </MudStack>
            </MudPaper>
        }
    }
</MudStack>

@code {
    private readonly BookingFormModel _bookingForm = new();
    private ClinicSummaryResponse? _clinicSummary;
    private string? _clinicsLoadError;
    private bool _isLoadingAvailability;
    private string? _availabilityError;
    private List<AvailableSlotResponse> _availableSlots = new();
    private DateOnly _selectedDate = DateOnly.FromDateTime(DateTime.Today);
    private bool _isSubmitting;
    private string? _submissionError;
    private BookingDetailsResponse? _confirmation;

    private DateTime SelectedDateTime => _selectedDate.ToDateTime(TimeOnly.MinValue);

    protected override async Task OnInitializedAsync()
    {
        AuthState.StateChanged += OnAuthStateChanged;
        ApplyUserDetails(AuthState.CurrentUser);
        await LoadClinicsAsync();
    }

    private async Task LoadClinicsAsync()
    {
        _clinicsLoadError = null;

        try
        {
            _clinicSummary = await BookingApiClient.GetClinicsAsync();
            if (_clinicSummary?.Clinics.Count > 0 && _bookingForm.ClinicId == 0)
                _bookingForm.ClinicId = _clinicSummary.Clinics[0].Id;
            
            await LoadAvailabilityAsync();
        }
        catch (Exception)
        {
            _clinicsLoadError = "We couldn't load clinics at the moment. Please try again later.";
        }
    }

    private async Task LoadAvailabilityAsync()
    {
        _availabilityError = null;
        _confirmation = null;
        _availableSlots.Clear();

        if (_bookingForm.ClinicId == 0)
        {
            return;
        }

        _isLoadingAvailability = true;

        try
        {
            var slots = await BookingApiClient.GetAvailabilityAsync(_bookingForm.ClinicId, _selectedDate);
            _availableSlots = slots.ToList();
            if (!_availableSlots.Any())
            {
                _bookingForm.AppointmentSlotId = null;
            }
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.Unauthorized || ex.StatusCode == HttpStatusCode.Forbidden)
        {
            _availabilityError = "Please log in to view the clinic availability.";
            _bookingForm.AppointmentSlotId = null;
        }
        catch (Exception)
        {
            _availabilityError = "We couldn't retrieve availability. Please try again.";
            _bookingForm.AppointmentSlotId = null;
        }
        finally
        {
            _isLoadingAvailability = false;
        }
    }

    private async Task OnClinicChanged(int clinicId)
    {
        if (_bookingForm.ClinicId == clinicId)
        {
            return;
        }

        _bookingForm.ClinicId = clinicId;
        _bookingForm.AppointmentSlotId = null;
        await LoadAvailabilityAsync();
    }

    private async Task OnDateChanged(DateTime? date)
    {
        if (date is null)
        {
            return;
        }

        var newDate = DateOnly.FromDateTime(date.Value);
        if (newDate == _selectedDate)
        {
            return;
        }

        _selectedDate = newDate;
        _bookingForm.AppointmentSlotId = null;
        await LoadAvailabilityAsync();
    }

    private void SelectSlot(int slotId)
    {
        _bookingForm.AppointmentSlotId = slotId;
        _submissionError = null;
    }

    private async Task SubmitAsync()
    {
        _submissionError = null;
        _confirmation = null;

        if (_bookingForm.AppointmentSlotId is null)
        {
            _submissionError = "Please select an available slot.";
            return;
        }

        _isSubmitting = true;

        try
        {
            var request = new BookingRequest
            {
                ClinicId = _bookingForm.ClinicId,
                AppointmentSlotId = _bookingForm.AppointmentSlotId.Value,
                PatientName = _bookingForm.PatientName,
                PatientEmail = _bookingForm.PatientEmail,
                Notes = string.IsNullOrWhiteSpace(_bookingForm.Notes) ? null : _bookingForm.Notes
            };

            _confirmation = await BookingApiClient.CreateBookingAsync(request);
            _availableSlots = _availableSlots.Where(slot => slot.Id != request.AppointmentSlotId).ToList();
            _bookingForm.AppointmentSlotId = null;
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.Unauthorized || ex.StatusCode == HttpStatusCode.Forbidden)
        {
            _submissionError = "You need to be logged in to complete a booking.";
        }
        catch (Exception)
        {
            _submissionError = "We couldn't save the booking. Please try again.";
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private async Task OnAuthStateChangedAsync()
    {
        ApplyUserDetails(AuthState.CurrentUser);
        await LoadAvailabilityAsync();
        StateHasChanged();
    }

    private void OnAuthStateChanged()
    {
        _ = InvokeAsync(OnAuthStateChangedAsync);
    }

    private void ApplyUserDetails(LoginResponse? user)
    {
        if (user is null)
        {
            return;
        }

        _bookingForm.PatientEmail = user.Email;
        if (string.IsNullOrWhiteSpace(_bookingForm.PatientName))
        {
            _bookingForm.PatientName = user.DisplayName;
        }
    }

    public void Dispose()
    {
        AuthState.StateChanged -= OnAuthStateChanged;
    }

    private sealed class BookingFormModel
    {
        [Range(1, int.MaxValue, ErrorMessage = "Select a clinic")]
        public int ClinicId { get; set; }

        [Required(ErrorMessage = "Select a slot")]
        public int? AppointmentSlotId { get; set; }

        [Required]
        [StringLength(128)]
        public string PatientName { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string PatientEmail { get; set; } = string.Empty;

        [StringLength(512)]
        public string? Notes { get; set; }
    }
}
