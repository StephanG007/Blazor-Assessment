@page "/"
@using System.Net
@using System.ComponentModel.DataAnnotations
@using Contracts.Account
@using Contracts.Bookings
@using Contracts.Clinics
@using UI.Services
@inject BookingApiClient BookingApiClient
@inject AuthState AuthState
@implements IDisposable

<PageTitle>Book an appointment</PageTitle>

<h1>Book an appointment</h1>
<p class="lead">Choose a clinic, pick a date, and reserve a slot in just a few clicks.</p>

@if (clinicsLoadError is not null)
{
    <div class="alert alert-danger" role="alert">@clinicsLoadError</div>
}
else if (clinics is null)
{
    <div class="loading">Loading clinics...</div>
}
else if (clinics.Count == 0)
{
    <div class="alert alert-info" role="alert">No clinics are currently available for booking.</div>
}
else
{
    <EditForm Model="bookingForm" OnValidSubmit="SubmitAsync">
        <DataAnnotationsValidator />
        <ValidationSummary class="validation-summary" />

        <div class="card booking-card">
            <div class="card-body">
                <div class="selection-grid">
                    <div>
                        <label class="form-label" for="clinic">Clinic</label>
                        <InputSelect id="clinic" class="form-select" @bind-Value="bookingForm.ClinicId" @onchange="OnClinicChanged">
                            <option value="0">Select a clinic</option>
                            @foreach (var clinic in clinics)
                            {
                                <option value="@clinic.Id">@clinic.Name (@clinic.City, @clinic.Province)</option>
                            }
                        </InputSelect>
                    </div>
                    <div>
                        <label class="form-label" for="date">Date</label>
                        <InputDate id="date" class="form-control" @bind-Value="selectedDate" @onchange="OnDateChanged" />
                    </div>
                </div>

                <section class="availability">
                    <h2>Available slots</h2>
                    @if (!string.IsNullOrEmpty(availabilityError))
                    {
                        <div class="alert alert-warning" role="alert">@availabilityError</div>
                    }
                    else if (isLoadingAvailability)
                    {
                        <div class="loading">Checking availability...</div>
                    }
                    else if (availableSlots.Count == 0)
                    {
                        <div class="alert alert-info" role="alert">No open slots for the selected date.</div>
                    }
                    else
                    {
                        <div class="slot-grid">
                            @foreach (var slot in availableSlots)
                            {
                                var isSelected = bookingForm.AppointmentSlotId == slot.Id;
                                <button type="button" class="slot-button @(isSelected ? "selected" : null)" @onclick="() => SelectSlot(slot.Id)">
                                    <span>@slot.StartTime.ToLocalTime().ToString("HH:mm") - @slot.EndTime.ToLocalTime().ToString("HH:mm")</span>
                                </button>
                            }
                        </div>
                        <ValidationMessage For="() => bookingForm.AppointmentSlotId" class="slot-validation" />
                    }
                </section>

                <section class="patient-details">
                    <h2>Patient details</h2>
                    <div class="form-grid">
                    <div>
                        <label class="form-label" for="patient-name">Full name</label>
                        <InputText id="patient-name" class="form-control" @bind-Value="bookingForm.PatientName" />
                        <ValidationMessage For="() => bookingForm.PatientName" />
                    </div>
                    <div>
                        <label class="form-label" for="patient-email">Email</label>
                        <InputText id="patient-email" class="form-control" @bind-Value="bookingForm.PatientEmail" />
                        <ValidationMessage For="() => bookingForm.PatientEmail" />
                    </div>
                </div>
                <div>
                    <label class="form-label" for="notes">Notes (optional)</label>
                        <InputTextArea id="notes" class="form-control" rows="3" @bind-Value="bookingForm.Notes" />
                    </div>
                </section>

                @if (!string.IsNullOrEmpty(submissionError))
                {
                    <div class="alert alert-danger" role="alert">@submissionError</div>
                }

                <button class="btn btn-success" type="submit" disabled="@(isSubmitting || bookingForm.AppointmentSlotId is null)">
                    @(isSubmitting ? "Booking..." : "Book appointment")
                </button>
            </div>
        </div>
    </EditForm>

    @if (confirmation is not null)
    {
        <div class="card confirmation-card">
            <div class="card-body">
                <h2>Booking confirmed!</h2>
                <p>Your appointment at <strong>@confirmation.ClinicName</strong> is scheduled for
                    <strong>@confirmation.StartTime.ToLocalTime().ToString("dddd, dd MMMM yyyy HH:mm")</strong>.</p>
                <ul>
                    <li><strong>Patient:</strong> @confirmation.PatientName (@confirmation.PatientEmail)</li>
                    @if (!string.IsNullOrWhiteSpace(confirmation.Notes))
                    {
                        <li><strong>Notes:</strong> @confirmation.Notes</li>
                    }
                </ul>
            </div>
        </div>
    }
}

@code {
    private readonly BookingFormModel bookingForm = new();
    private List<ClinicSummaryDto>? clinics;
    private string? clinicsLoadError;
    private bool isLoadingAvailability;
    private string? availabilityError;
    private List<AvailableSlotResponse> availableSlots = new();
    private DateOnly selectedDate = DateOnly.FromDateTime(DateTime.Today);
    private bool isSubmitting;
    private string? submissionError;
    private BookingDetailsResponse? confirmation;

    protected override async Task OnInitializedAsync()
    {
        AuthState.StateChanged += OnAuthStateChanged;
        ApplyUserDetails(AuthState.CurrentUser);
        await LoadClinicsAsync();
    }

    private async Task LoadClinicsAsync()
    {
        clinicsLoadError = null;

        try
        {
            clinics = (await BookingApiClient.GetClinicsAsync()).ToList();
            if (clinics.Count > 0 && bookingForm.ClinicId == 0)
            {
                bookingForm.ClinicId = clinics[0].Id;
            }
            await LoadAvailabilityAsync();
        }
        catch (Exception)
        {
            clinicsLoadError = "We couldn't load clinics at the moment. Please try again later.";
        }
    }

    private async Task LoadAvailabilityAsync()
    {
        availabilityError = null;
        confirmation = null;
        availableSlots.Clear();

        if (bookingForm.ClinicId == 0)
        {
            return;
        }

        isLoadingAvailability = true;

        try
        {
            var slots = await BookingApiClient.GetAvailabilityAsync(bookingForm.ClinicId, selectedDate);
            availableSlots = slots.ToList();
            if (!availableSlots.Any())
            {
                bookingForm.AppointmentSlotId = null;
            }
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.Unauthorized || ex.StatusCode == HttpStatusCode.Forbidden)
        {
            availabilityError = "Please log in to view the clinic availability.";
            bookingForm.AppointmentSlotId = null;
        }
        catch (Exception)
        {
            availabilityError = "We couldn't retrieve availability. Please try again.";
            bookingForm.AppointmentSlotId = null;
        }
        finally
        {
            isLoadingAvailability = false;
        }
    }

    private void SelectSlot(int slotId)
    {
        bookingForm.AppointmentSlotId = slotId;
        submissionError = null;
    }

    private async Task SubmitAsync()
    {
        submissionError = null;
        confirmation = null;

        if (bookingForm.AppointmentSlotId is null)
        {
            submissionError = "Please select an available slot.";
            return;
        }

        isSubmitting = true;

        try
        {
            var request = new BookingRequest
            {
                ClinicId = bookingForm.ClinicId,
                AppointmentSlotId = bookingForm.AppointmentSlotId.Value,
                PatientName = bookingForm.PatientName,
                PatientEmail = bookingForm.PatientEmail,
                Notes = string.IsNullOrWhiteSpace(bookingForm.Notes) ? null : bookingForm.Notes
            };

            confirmation = await BookingApiClient.CreateBookingAsync(request);
            availableSlots = availableSlots.Where(slot => slot.Id != request.AppointmentSlotId).ToList();
            bookingForm.AppointmentSlotId = null;
        }
        catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.Unauthorized || ex.StatusCode == HttpStatusCode.Forbidden)
        {
            submissionError = "You need to be logged in to complete a booking.";
        }
        catch (Exception)
        {
            submissionError = "We couldn't save the booking. Please try again.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private Task OnClinicChanged(ChangeEventArgs _)
    {
        bookingForm.AppointmentSlotId = null;
        return LoadAvailabilityAsync();
    }

    private Task OnDateChanged(ChangeEventArgs _)
    {
        bookingForm.AppointmentSlotId = null;
        return LoadAvailabilityAsync();
    }

    private void OnAuthStateChanged()
    {
        ApplyUserDetails(AuthState.CurrentUser);
        _ = InvokeAsync(async () =>
        {
            await LoadAvailabilityAsync();
            StateHasChanged();
        });
    }

    private void ApplyUserDetails(LoginResponse? user)
    {
        if (user is null)
        {
            return;
        }

        bookingForm.PatientEmail = user.Email;
        if (string.IsNullOrWhiteSpace(bookingForm.PatientName))
        {
            bookingForm.PatientName = user.DisplayName;
        }
    }

    public void Dispose()
    {
        AuthState.StateChanged -= OnAuthStateChanged;
    }

    private sealed class BookingFormModel
    {
        [Range(1, int.MaxValue, ErrorMessage = "Select a clinic")]
        public int ClinicId { get; set; }

        [Required(ErrorMessage = "Select a slot")]
        public int? AppointmentSlotId { get; set; }

        [Required]
        [StringLength(128)]
        public string PatientName { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string PatientEmail { get; set; } = string.Empty;

        [StringLength(512)]
        public string? Notes { get; set; }
    }
}
