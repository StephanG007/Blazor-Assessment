@page "/users"
@using Contracts.Users
@inject AuthState AuthState
@inject UsersApiClient UsersClient
@implements IDisposable

<PageTitle>User directory</PageTitle>

<div class="users-page">
    <div class="dx-card users-card">
        <h1 class="page-title">User directory</h1>
        <p class="page-lead">Browse the registered users and their profile details.</p>

        @if (!IsAuthenticated)
        {
            <div class="dx-alert dx-alert-info">
                Sign in with an administrator account to view the users list.
            </div>
        }
        else
        {
            <div class="grid-container">
                @if (_isLoading)
                {
                    <div class="grid-loading">
                        <div class="dx-loadindicator"></div>
                        <span>Loading users...</span>
                    </div>
                }
                else if (_users.Count == 0 && string.IsNullOrEmpty(_loadError))
                {
                    <div class="dx-alert dx-alert-warning">No users were returned from the server.</div>
                }
                else
                {
                    <DxDataGrid Data="_users"
                                KeyFieldName="Id"
                                PageSize="10"
                                ShowFilterRow="true"
                                ShowGroupPanel="false"
                                ShowColumnLines="false"
                                ShowRowAlternation="true"
                                CssClass="users-grid">
                        <Pager AllowedPageSizes="@(new[] { 10, 20, 50 })" ShowAllButton="false" />
                        <Columns>
                            <DxDataGridColumn FieldName="DisplayName" Caption="Name" />
                            <DxDataGridColumn FieldName="Region" Caption="Region" />
                            <DxDataGridColumn FieldName="Country" Caption="Country" />
                            <DxDataGridColumn FieldName="Gender" Caption="Gender">
                                <CellDisplayTemplate Context="cellContext">
                                    @FormatGender(cellContext.DataItem)
                                </CellDisplayTemplate>
                            </DxDataGridColumn>
                        </Columns>
                    </DxDataGrid>
                }
            </div>
        }

        @if (!string.IsNullOrEmpty(_loadError))
        {
            <div class="dx-alert dx-alert-danger">@_loadError</div>
        }
    </div>
</div>

@code {
    private readonly List<UserListResponse> _users = [];
    private CancellationTokenSource? _loadCts;
    private string? _loadError;
    private bool _isLoading;

    private bool IsAuthenticated => AuthState.CurrentUser is not null;

    protected override void OnInitialized()
    {
        AuthState.StateChanged += HandleAuthStateChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        _loadCts?.Cancel();
        _loadCts?.Dispose();
        _loadCts = null;

        _loadError = null;

        if (!IsAuthenticated)
        {
            _users.Clear();
            _isLoading = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        _isLoading = true;
        await InvokeAsync(StateHasChanged);

        var cancellationSource = new CancellationTokenSource();
        _loadCts = cancellationSource;

        try
        {
            var users = await UsersClient.GetUsersAsync(cancellationSource.Token);

            _users.Clear();
            _users.AddRange(users);
        }
        catch (UnauthorizedAccessException ex)
        {
            _loadError = ex.Message;
            _users.Clear();
        }
        catch (HttpRequestException)
        {
            _loadError = "An error occurred while loading users. Please try again.";
            _users.Clear();
        }
        catch (TaskCanceledException)
        {
            // Swallow cancellation triggered by a refresh.
        }
        finally
        {
            if (!cancellationSource.IsCancellationRequested)
            {
                _isLoading = false;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private void HandleAuthStateChanged() => _ = InvokeAsync(LoadUsersAsync);

    private static string FormatGender(UserListResponse user) => user.Gender switch
    {
        1 => "Female",
        0 => "Male",
        _ => "Unspecified"
    };

    public void Dispose()
    {
        AuthState.StateChanged -= HandleAuthStateChanged;
        _loadCts?.Cancel();
        _loadCts?.Dispose();
        _loadCts = null;
    }
}
