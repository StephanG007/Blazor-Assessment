@using System.ComponentModel.DataAnnotations
@using Contracts.Account
@using UI.Services
@inject AuthService AuthService
@inject AuthState AuthState
@implements IDisposable

<div class="login-bar">
    @if (_currentUser is null)
    {
        <EditForm EditContext="_editContext" OnValidSubmit="HandleLoginAsync" class="login-form">
            <DataAnnotationsValidator />
            <div class="login-fields">
                <div class="dx-field login-field">
                    <InputText id="login-email"
                               class="dx-texteditor dx-editor-outlined"
                               @bind-Value="_loginModel.Email"
                               disabled="@_isBusy"
                               placeholder="Email"
                               type="email"
                               autocomplete="username" />
                    <ValidationMessage For="() => _loginModel.Email" class="validation" />
                </div>
                <div class="dx-field login-field">
                    <InputText id="login-password"
                               class="dx-texteditor dx-editor-outlined"
                               @bind-Value="_loginModel.Password"
                               disabled="@_isBusy"
                               type="password"
                               placeholder="Password"
                               autocomplete="current-password" />
                    <ValidationMessage For="() => _loginModel.Password" class="validation" />
                </div>
                <button type="submit"
                        class="dx-button dx-button-mode-contained dx-button-type-default login-button"
                        disabled="@_isBusy">
                    <span class="dx-button-content">@(_isBusy ? "Signing in..." : "Log in")</span>
                </button>
            </div>
            @if (!string.IsNullOrWhiteSpace(_errorMessage))
            {
                <div class="dx-invalid-message login-error">@_errorMessage</div>
            }
        </EditForm>
    }
    else
    {
        <div class="user-summary dx-card">
            <div class="user-avatar" style="@BuildAvatarStyle(_currentUser.ImageUrl)">
                @GetInitial(_currentUser.DisplayName)
            </div>
            <div class="user-name">@_currentUser.DisplayName</div>
            <button type="button"
                    class="dx-button dx-button-mode-text dx-button-type-default logout-button"
                    @onclick="HandleLogout"
                    disabled="@_isBusy">
                <span class="dx-button-content">Log out</span>
            </button>
        </div>
    }
</div>

@code {
    private LoginViewModel _loginModel = new();
    private EditContext? _editContext;
    private bool _isBusy;
    private string? _errorMessage;
    private LoginResponse? _currentUser;

    protected override void OnInitialized()
    {
        _currentUser = AuthState.CurrentUser;
        AuthState.StateChanged += HandleAuthStateChanged;
        _editContext = new EditContext(_loginModel);
    }

    private async Task HandleLoginAsync()
    {
        _errorMessage = null;
        _isBusy = true;

        try
        {
            var (success, error) = await AuthService.LoginAsync(_loginModel.Email, _loginModel.Password);

            if (!success)
                _errorMessage = error;
            else
                _editContext = new EditContext(_loginModel);
        }
        catch
        {
            _errorMessage = "We couldn't reach the server. Please try again.";
        }
        finally
        {
            _isBusy = false;
        }
    }

    private void HandleLogout()
    {
        _errorMessage = null;
        _isBusy = true;
        AuthService.Logout();
        _isBusy = false;
    }

    private void HandleAuthStateChanged()
    {
        _currentUser = AuthState.CurrentUser;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AuthState.StateChanged -= HandleAuthStateChanged;
    }

    private static string GetInitial(string? name)
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            return "?";
        }

        var trimmed = name.Trim();
        return trimmed[..1].ToUpperInvariant();
    }

    private static string BuildAvatarStyle(string? imageUrl)
    {
        if (string.IsNullOrWhiteSpace(imageUrl))
        {
            return string.Empty;
        }

        var sanitized = imageUrl.Replace("'", "\\'");
        return $"background-image: url('{sanitized}');";
    }

    private sealed class LoginViewModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }
}
